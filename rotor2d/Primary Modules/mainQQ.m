ticclear all;Ngrid = 10;         %number of grid points in any dimensionLmax = 3;           %basis set cut-off (spherical harmonics L)freq = -50:0.05:50; %frequency bins for the spectrumdf = 0.1;           %width of the gaussians used for smoothingmolName = 'H2';                     %molecule type: H2 or D2  cutOccup = 0.50;                    %total population coveredalpha = [1,0,0; 0,1,0; 0,0,2];      %polarizability matrix                                   Temp = 4.0;                         %Temp=kB*TPrange = [1:3]+0.00000001;          %pressure range                                lambda = 1;                         %EQQ potential strength da = pi/Ngrid; %spehrical grid densityphi = 0:2*da:(2*pi-2*da);theta = 0:da:(pi-da);[phi,theta] = meshgrid(phi,theta);Nbasis = (Lmax+1)^2;SphHarmCol = readSphHarm(phi,theta,Lmax,Ngrid,Nbasis);if (molName == 'H2'),  B = 1.0; %B=hbar^2/2Ielse  if (molName == 'D2'),    B = 0.5;  else    error('atom name not found!')  end;end;statistics = [];statfname = ['EQQ_results/stats_EQQ',molName,'.dat'];statfid = fopen(statfname,'w');fprintf(statfid,'# pres(1) temp(2) Zpara(3) Zorto(4) Ztotal(5) Epara(6) Eorto(7) Etotal(8) \n');specfname = ['EQQ_results/spec_EQQ',molName,'.dat'];specfid = fopen(specfname,'w');fprintf(specfid,'# pres(1) freq(2) Rpara(3) Rorto(4) Rtotal(5) nzRpara(6) nzRorto(7) nzRtotal(8) \n');KinEngBasis = generateKineticsample(B,Lmax);for P = Prange,    disp('looping');  R0=(1./P).^(1.0./5.0);  disp(['Pressure: ',num2str(P)]);  fflush(stdout);    disp('still looping');  PotEngGridEQQ = generateEQQsample(phi,theta,R0,Ngrid,lambda);  PotEngBasisEQQ = integrateEQQ(phi,theta,da,Ngrid,Nbasis,PotEngGridEQQ,SphHarmCol);  Hamiltonian = KinEngBasis+PotEngBasisEQQ;  tf = issymmetric(mat2str(Hamiltonian,1))  disp('still still looping');    [coeffBasis,engLevels] = solveSchrodinger(Hamiltonian, Nbasis*Nbasis);  wfnGrid = transpose(coeffBasis)*SphHarmCol;  rotWfnPar = wfnParity(wfnGrid,Nbasis^2,Ngrid^2); %1 for symm/even J and -1 for antisymm/odd J      disp('looping over stats');  %compute partition functions and total energies  statsPT = specConcen(engLevels,rotWfnPar,molName,Temp,P);  fprintf(statfid,[repmat('%g ',[1,size(statsPT,2)]),'\n'],statsPT');  fprintf(statfid,'\n');  disp('looping over raman Spectrum');  %compute Raman spectra  rawSpectrum = calculateRamanSpectrum(phi,theta,da,Ngrid,engLevels,wfnGrid,rotWfnPar,molName,Nbasis,alpha,Temp,cutOccup,statsPT(end,5));  ramanSpectrum = smoothSpectrum(rawSpectrum,freq,df);  noRayleighSpectrum = smoothSpectrum(rawSpectrum(abs(rawSpectrum(:,1))>(10^(-5)),:),freq,df); %eliminate the zero frequencies  specPW = [repmat(P,[size(ramanSpectrum,1),1]),ramanSpectrum,sum(ramanSpectrum(:,2:end),2),noRayleighSpectrum(:,2:end),sum(noRayleighSpectrum(:,2:end),2)];   fprintf(specfid,[repmat('%g ',[1,size(specPW,2)]),'\n'],specPW');  fprintf(specfid,'\n');      disp('looping completed');endfclose(statfid); toc