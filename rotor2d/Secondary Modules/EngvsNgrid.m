clear all;Ngrid = 20;         %number of grid points in any dimensionLmax = 5;           %basis set cut-off (spherical harmonics L)Ngridvec = [1:Ngrid];Nbasis = (Lmax+1)^2;molName = 'H2';                     %molecule type: H2 or D2                                                         P = 2;                   %pressure range                                lambda = 1;                         %EQQ potential strength if (molName == 'H2'),  B = 1.0; %B=hbar^2/2Ielse  if (molName == 'D2'),    B = 0.5;  else    error('atom name not found!')  end;end;engLevelsname = ['EQQplot/engvsNgrid',molName,'.dat'];engLevelsfid = fopen(engLevelsname,'w');fprintf(engLevelsfid,'# Ngrid(1) Eng(2) Eng(3) Eng(4)... \n');KinEngBasis = generateKineticsample(B,Lmax);for N = Ngridvec,   disp('looping');  R0=(1./P).^(1.0./5.0);  disp(['Ngrid:',num2str(N)]);  fflush(stdout);    da = pi/N;                      %spehrical grid density  phi = 0:2*da:(2*pi-2*da);  theta = 0:da:(pi-da);  [phi,theta] = meshgrid(phi,theta);    SphHarmCol = generateBasis(phi,theta,Lmax,N);      disp('still looping');  PotEngGridEQQ = generateEQQ(phi,theta,R0,N,lambda);  PotEngBasisEQQ = integrateEQQ(phi,theta,da,N,Nbasis,PotEngGridEQQ,SphHarmCol);  Hamiltonian = KinEngBasis+PotEngBasisEQQ;  disp('still still looping');      [coeffBasis,engLevels] = solveSchrodinger(Hamiltonian,Nbasis*Nbasis);    fprintf(engLevelsfid,[repmat('%g ',[1,size(engLevels)]),'\n'],N,engLevels-engLevels(1));  fprintf(engLevelsfid,'\n');  disp('looping completed');end fclose(engLevelsfid);