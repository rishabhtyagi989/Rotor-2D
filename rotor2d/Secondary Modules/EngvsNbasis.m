clear all;Ngrid = 15;         %number of grid points in any dimensionLmax = 10           %basis set cut-off (spherical harmonics L)Lmaxvec = [0:Lmax];molName = 'H2';                     %molecule type: H2 or D2                                                         P = 2;                   %pressure range                                lambda = 1;                         %EQQ potential strength da = pi/Ngrid;                      %spehrical grid densityphi = 0:2*da:(2*pi-2*da);theta = 0:da:(pi-da);[phi,theta] = meshgrid(phi,theta);if (molName == 'H2'),  B = 1.0; %B=hbar^2/2Ielse  if (molName == 'D2'),    B = 0.5;  else    error('atom name not found!')  end;end;engLevelsname = ['EQQplot/engvsNbasis',molName,'.dat'];engLevelsfid = fopen(engLevelsname,'w');fprintf(engLevelsfid,'# Lmax(1) Eng(2) Eng(3) Eng(4)... \n');for l=Lmaxvec,   disp('looping');  R0=(1./P).^(1.0./5.0);  disp(['Lmax:',num2str(l)]);  fflush(stdout);    Nbasis = (l+1)^2;  SphHarmCol = generateBasis(phi,theta,l,Ngrid);      disp('still looping');  PotEngGridEQQ = generateEQQ(phi,theta,R0,Ngrid,lambda);  PotEngBasisEQQ = integrateEQQ(phi,theta,da,Ngrid,Nbasis,PotEngGridEQQ,SphHarmCol);  KinEngBasis = generateKinetic(B,l);  Hamiltonian = KinEngBasis+PotEngBasisEQQ;  disp('still still looping');      [coeffBasis,engLevels] = solveSchrodinger(Hamiltonian,Nbasis*Nbasis);    fprintf(engLevelsfid,[repmat('%g ',[1,size(engLevels)]),'\n'],l,engLevels-engLevels(1));  fprintf(engLevelsfid,'\n');  disp('looping completed');end fclose(engLevelsfid);