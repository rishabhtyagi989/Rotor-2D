clear all;Ngrid = 15;         %number of grid points in any dimensionLmax = 5;           %basis set cut-off (spherical harmonics L)freq = -50:0.05:50; %frequency bins for the spectrumdf = 0.1;           %width of the gaussians used for smoothingmolName = 'H2';                     %molecule type: H2 or D2  cutOccup = 0.99;                    %total population coveredalpha = [1,0,0; 0,1,0; 0,0,2];      %polarizability matrix                                   Temp = 4.0;                         %Temp=kB*TPrange = [0:1:3.6]+0.00000001;      %pressure range                                lambda = 1;                         %EQQ potential strength da = pi/Ngrid; %spehrical grid densityphi = 0:2*da:(2*pi-2*da);theta = 0:da:(pi-da);[phi,theta] = meshgrid(phi,theta);Nbasis = (Lmax+1)^2;SphHarm1 = generateBasis(phi,theta,Lmax,Ngrid);SphHarmCol = kron(SphHarm1,SphHarm1);if (molName == 'H2'),  B = 1.0; %B=hbar^2/2Ielse  if (molName == 'D2'),    B = 0.5;  else    error('atom name not found!')  end;end;%write the coefficient of expansion vs pressure on a filecoeffBasisPlot = [];coeffBasisname = ['EQQ_results/coeff_QQ',molName,'.dat'];coeffid = fopen(coeffBasisname,'w');fprintf(coeffid,'#pressure coeffBasis(1) coeffBasis(2) coeffBasis(3) coeffBasis(4) coeffBasis(5)... \n');coeffBasisPlot = [];coeffBasisname = ['EQQ_results/coeff_QQ',molName,'.dat'];coeffid = fopen(coeffBasisname,'w');fprintf(coeffid,'#pressure coeffBasis(1) coeffBasis(2) coeffBasis(3) coeffBasis(4) coeffBasis(5)... \n');for P = Prange,    disp('looping');  R0=(1./P).^(1.0./5.0);  disp(['Pressure: ',num2str(P)]);  fflush(stdout);    disp('still looping');  PotEngGridEQQ = generateEQQ(phi,theta,R0,lambda,Ngrid);  PotEngBasisEQQ = integrateEQQ(phi,theta,da,Ngrid,Nbasis,PotEngGridEQQ,Lmax);  KinEngBasis = generateKinetic(B,Lmax);  Hamiltonian = KinEngBasis+PotEngBasisEQQ;  disp('still still looping');    [coeffBasis,engLevels] = solveSchrodinger(Hamiltonian, Nbasis*Nbasis);    coeffvec = coeffBasis(1,:);  ci = (abs(coeffvec)).^2;    %compute the plot of coefficient vs pressure  fprintf(coeffid,[repmat('%g ',[1,257]),'\n'],P,ci);  fprintf(coeffid,'\n');disp('looping completed');  endfclose(coeffid);